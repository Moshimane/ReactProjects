JSX:
    JSX - Javascript Extension that allows us to write Javascript in html

Components:
    Why do we use Components in react:
        1) To achieve better modularity (single responsibility)
        2) Reusability (components can be created once and used many times)
        3) Abstraction (Hide complexity/ implementations)
        4) Simplify Testing

Props:
    Props are parameters that a component accept/that are being passed to a component
    Destructuring of props:
        - It's a javascript concept that when you have an object with values, you take those values
        separately into different variables and avoid using the actual parent object (in this case the props object)
        -Destructuring methods:
            1) using properties in the method body like -> const {key1, key2, ...} = props;
            2) using the Component parameters like -> function ComponentName({key1, key2, ...})

    Props are immutable
    You can pass any kind of data to props primitives, arrays, objects, functions, components

React.StrictMode:
    Executes the application twice for safety purposes and is used whenever the application is
    running is dev mode(debugging mode).
    Remove StrictMode when running in production

Map:
    A map in javascripts is a method that allows you to loop through arrays

onClick:
    referencing a method with brackets within an onClick will call the method whenever the application renders even if the button is not clicked
     - Correct syntax onClick={methodName}
     - Incorrect syntax onClick={methodName()}

State:
    State is an object that holds information to control behaviour of a component

    Why do you need state:
        1) Props are immutable
        2) Value which can change dynamically

    Props vs State
        1) Props are passed to the component while state is contained inside the component
        2) Props are immutable and state can be changed
        3) Props are like parameters passed to a function and state is like a variable declared in a function body

    Hooks can only be called inside of the body of a function component

Effect:
    What does useEffect do?
        - useEffect is used to tell react that your component needs to do something after rendering

